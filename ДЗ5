import UIKit

enum windows {
    case open
    case closed
}
enum engine {
    case on
    case off
}
enum nitro {
    case nitroOn
    case nitroOff
}
enum trunk {
    case trunkIsFull
    case trunkIsEmpty
}
protocol car {
    var brand: String {get}
    var release: Int {get}
    var engineState: engine {get set}
    var windowsState: windows {get set}
}
extension car {
    mutating func changeEngineState(engineState: engine) {
        self.engineState = engineState
    }
    mutating func chageWindowsState(windowsState: windows) {
        self.windowsState = windowsState
    }
}
class basicCar: car {
    var brand: String
    var release: Int
    var engineState: engine = .off
    var windowsState: windows = .closed
    init(brand: String, release: Int) {
        self.brand = brand
        self.release = release
    }
}
class sportCar: basicCar, CustomStringConvertible {
    var nitroState: nitro = .nitroOff
    var description: String {
        return "engine is \(engineState), windows are \(windowsState), nitro is \(nitroState), release date is \(release)"
    }
}
class trunkCar: basicCar, CustomStringConvertible{
    var trunkState: trunk = .trunkIsEmpty
    var description: String{
        return "engine is \(engineState), windows are \(windowsState), trunk is \(trunkState), release date is \(release)"
    }
}
var chrysler = sportCar(brand: "Крайслер", release: 2021)
var kamaz = trunkCar(brand: "Камаз", release: 1999)
chrysler.changeEngineState(engineState: .on)
chrysler.nitroState = .nitroOn
kamaz.chageWindowsState(windowsState: .open)
kamaz.trunkState = .trunkIsFull
print(chrysler.description)
print(kamaz.description)